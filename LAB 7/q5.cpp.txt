#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

void addNode(Node** head, int val) {
    Node* newNode = new Node(val);
    if (*head == nullptr) {
        *head = newNode;
        return;
    }
    
    Node* temp = *head;
    while (temp->next != nullptr) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void swap(Node* a, Node* b) {
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

Node* partition(Node* head, Node* end) {
    Node* pivot = end;
    Node* i = nullptr;
    Node* current = head;
    
    while (current != end) {
        if (current->data < pivot->data) {
            if (i == nullptr) {
                i = head;
            } else {
                i = i->next;
            }
            swap(i, current);
        }
        current = current->next;
    }
    
    if (i == nullptr) {
        i = head;
    } else {
        i = i->next;
    }
    swap(i, end);
    
    return i;
}

void quickSortHelper(Node* head, Node* end) {
    if (head == nullptr || head == end) {
        return;
    }
    
    Node* pivot = partition(head, end);
    
    if (pivot != nullptr && head != pivot) {
        Node* temp = head;
        while (temp->next != pivot) {
            temp = temp->next;
        }
        quickSortHelper(head, temp);
    }
    
    if (pivot != nullptr && pivot->next != nullptr) {
        quickSortHelper(pivot->next, end);
    }
}

void quickSort(Node* head) {
    if (head == nullptr) {
        return;
    }
    
    Node* end = head;
    while (end->next != nullptr) {
        end = end->next;
    }
    
    quickSortHelper(head, end);
}

void display(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    
    addNode(&head, 10);
    addNode(&head, 7);
    addNode(&head, 8);
    addNode(&head, 9);
    addNode(&head, 1);
    addNode(&head, 5);
    addNode(&head, 3);
    
    cout << "Before sorting: ";
    display(head);
    
    quickSort(head);
    
    cout << "After sorting: ";
    display(head);
    
    return 0;
}