#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class CircularLinkedList {
private:
    Node* head;
    
public:
    CircularLinkedList() {
        head = nullptr;
    }
    
    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        
        if (head == nullptr) {
            head = newNode;
            newNode->next = head;
            return;
        }
        
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        
        temp->next = newNode;
        newNode->next = head;
    }
    
    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        
        if (head == nullptr) {
            head = newNode;
            newNode->next = head;
            return;
        }
        
        Node* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        
        newNode->next = head;
        temp->next = newNode;
        head = newNode;
    }
    
    void insertAtPosition(int val, int pos) {
        if (pos == 1) {
            insertAtBeginning(val);
            return;
        }
        
        Node* newNode = new Node(val);
        Node* temp = head;
        
        for (int i = 1; i < pos - 1; i++) {
            temp = temp->next;
            if (temp == head) {
                cout << "Position out of bounds" << endl;
                delete newNode;
                return;
            }
        }
        
        newNode->next = temp->next;
        temp->next = newNode;
    }
    
    void deleteNode(int val) {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }
        
        if (head->data == val) {
            if (head->next == head) {
                delete head;
                head = nullptr;
                cout << "Node with value " << val << " deleted" << endl;
                return;
            }
            
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            
            temp->next = head->next;
            Node* toDelete = head;
            head = head->next;
            delete toDelete;
            cout << "Node with value " << val << " deleted" << endl;
            return;
        }
        
        Node* current = head;
        do {
            if (current->next->data == val) {
                Node* toDelete = current->next;
                current->next = current->next->next;
                delete toDelete;
                cout << "Node with value " << val << " deleted" << endl;
                return;
            }
            current = current->next;
        } while (current != head);
        
        cout << "Value " << val << " not found in the list" << endl;
    }
    
    void display() {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }
        
        Node* temp = head;
        cout << "Circular List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << "(back to " << head->data << ")" << endl;
    }
};

int main() {
    CircularLinkedList list;
    int choice, value, position;
    
    while (true) {
        cout << "\nCircular Linked List Operations" << endl;
        cout << "1. Insert at end" << endl;
        cout << "2. Insert at beginning" << endl;
        cout << "3. Insert at position" << endl;
        cout << "4. Delete a node" << endl;
        cout << "5. Display list" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        
        switch (choice) {
            case 1:
                cout << "Enter value to insert at end: ";
                cin >> value;
                list.insertAtEnd(value);
                break;
            case 2:
                cout << "Enter value to insert at beginning: ";
                cin >> value;
                list.insertAtBeginning(value);
                break;
            case 3:
                cout << "Enter value: ";
                cin >> value;
                cout << "Enter position: ";
                cin >> position;
                list.insertAtPosition(value, position);
                break;
            case 4:
                cout << "Enter value to delete: ";
                cin >> value;
                list.deleteNode(value);
                break;
            case 5:
                list.display();
                break;
            case 6:
                cout << "Exiting..." << endl;
                return 0;
            default:
                cout << "Invalid choice" << endl;
        }
    }
    
    return 0;
}