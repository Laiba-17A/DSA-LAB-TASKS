#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class LinkedList {
private:
    Node* head;
    
public:
    LinkedList() {
        head = nullptr;
    }
    
    void addAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
    
    void extractReverseAppend() {
        if (head == nullptr || head->next == nullptr) return;
        
        Node* altHead = nullptr;
        Node* current = head;
        
        while (current != nullptr && current->next != nullptr) {
            Node* altNode = current->next;
            current->next = altNode->next;
            
            altNode->next = altHead;
            altHead = altNode;
            
            current = current->next;
        }
        
        if (altHead == nullptr) return;
        
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = altHead;
    }
    
    void display() {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    
    list.addAtEnd(10);
    list.addAtEnd(4);
    list.addAtEnd(9);
    list.addAtEnd(1);
    list.addAtEnd(3);
    list.addAtEnd(5);
    list.addAtEnd(9);
    list.addAtEnd(4);
    
    cout << "Original list: ";
    list.display();
    
    list.extractReverseAppend();
    
    cout << "After operation: ";
    list.display();
    
    return 0;
}